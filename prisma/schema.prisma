generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// USER ROLES
enum Role {
  ADMIN
  GUEST
  ORGANIZATION
  TEACHER
  STUDENT
}

// NOTIFICATIONS
enum NotificationUserType {
  ORGANIZATION
  TEACHER
  STUDENT
}

enum NotificationType {
  ORGANIZATION_INVITE
}

enum NotificationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// DATABASE MODELS
model Profile {
  id      String @id @default(cuid())
  kindeId String @unique
  role    Role   @default(GUEST)

  name    String  @db.VarChar(255)
  email   String  @unique @db.VarChar(255)
  picture String? @default("/default-user-avatar.png") @db.VarChar(255)

  organizations Organization[]
  teachers      Teacher[]
  students      Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id String @id @default(cuid())

  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  phone   String @db.VarChar(255)
  city    String @db.VarChar(255)
  state   String @db.VarChar(255)
  country String @db.VarChar(255)
  email   String @unique @db.VarChar(255)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [kindeId])

  teachers   Teacher[]
  students   Student[]
  classrooms Classroom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId], name: "profileId")
  @@map("organizations")
}

model Teacher {
  id String @id @default(cuid())

  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  phone   String @db.VarChar(255)
  city    String @db.VarChar(255)
  state   String @db.VarChar(255)
  country String @db.VarChar(255)
  email   String @unique @db.VarChar(255)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [kindeId])

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  classrooms Classroom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId], name: "profileId")
  @@index([organizationId], name: "organizationId")
  @@map("teachers")
}

model Student {
  id String @id @default(cuid())

  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  phone   String @db.VarChar(255)
  city    String @db.VarChar(255)
  state   String @db.VarChar(255)
  country String @db.VarChar(255)
  email   String @unique @db.VarChar(255)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [kindeId])

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  classrooms Classroom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId], name: "profileId")
  @@index([organizationId], name: "organizationId")
  @@map("students")
}

model Classroom {
  id String @id @default(cuid())

  name        String @db.VarChar(255)
  description String @db.Text

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  teachers Teacher[]
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId], name: "organizationId")
  @@map("classrooms")
}

model Notification {
  id      String             @id @default(cuid())
  type    NotificationType
  status  NotificationStatus @default(PENDING)
  message String

  recipientId   String
  recipientType NotificationUserType

  senderId   String
  senderType NotificationUserType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId, senderType], name: "sender")
  @@index([recipientId, recipientType], name: "recipient")
  @@map("notifications")
}
