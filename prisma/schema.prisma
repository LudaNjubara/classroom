generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// USER ROLES
enum Role {
  ADMIN
  GUEST
  ORGANIZATION
  TEACHER
  STUDENT
}

// NOTIFICATIONS
enum NotificationUserType {
  ORGANIZATION
  TEACHER
  STUDENT
}

enum MessageSenderType {
  TEACHER
  STUDENT
}

enum NotificationType {
  ORGANIZATION_INVITE_TEACHER
  ORGANIZATION_INVITE_STUDENT
}

enum NotificationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// CLASSROOM SETTINGS
enum ClassroomSetting {
  ACCENT_COLOR
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// CLASSROOM HOMEWORK
enum AssignmentSolutionStatus {
  SUBMITTED
  RETURNED
  LOCKED
}

// STATISTICS
enum StatisticsEvent {
  // Platform events
  LOGIN_FREQUENCY
  SESSION_DURATION
  ACTIVE_TIME

  // Assignment events
  SUBMISSION_TIMELINESS
  ASSIGNMENT_COMPLETION_RATE
  ASSIGNMENT_NOTE_USAGE
  ASSIGNMENT_RESOURCE_USAGE
  GRADE_DISTRIBUTION

  // Communication events
  CALL_DURATION
  CALL_FREQUENCY
  PREFERED_COMM_METHOD

  // Misc events
  RESOURCE_DOWNLOAD_RATE
}

// DATABASE MODELS
model Profile {
  id      String @id @unique @default(cuid())
  kindeId String @unique
  role    Role   @default(GUEST)

  name    String  @db.VarChar(255)
  email   String  @unique @db.VarChar(255)
  picture String? @default("/default-user-avatar.png") @db.VarChar(255)

  organizations Organization[]
  teachers      Teacher[]
  students      Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id String @id @unique @default(cuid())

  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  phone   String @db.VarChar(255)
  city    String @db.VarChar(255)
  state   String @db.VarChar(255)
  country String @db.VarChar(255)
  email   String @unique @db.VarChar(255)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [kindeId], onDelete: Cascade)

  teachers   OrganizationTeacher[]
  students   OrganizationStudent[]
  classrooms Classroom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId], name: "profileId")
  @@map("organizations")
}

model Teacher {
  id String @id @unique @default(cuid())

  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  phone   String @db.VarChar(255)
  city    String @db.VarChar(255)
  state   String @db.VarChar(255)
  country String @db.VarChar(255)
  email   String @unique @db.VarChar(255)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [kindeId], onDelete: Cascade)

  organizations OrganizationTeacher[]
  classrooms    ClassroomTeacher[]
  assignments   ClassroomAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId], name: "profileId")
  @@map("teachers")
}

model OrganizationTeacher {
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([organizationId, teacherId])
  @@index([teacherId])
}

model Student {
  id String @id @unique @default(cuid())

  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  phone   String @db.VarChar(255)
  city    String @db.VarChar(255)
  state   String @db.VarChar(255)
  country String @db.VarChar(255)
  email   String @unique @db.VarChar(255)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [kindeId], onDelete: Cascade)

  organizations OrganizationStudent[]
  classrooms    ClassroomStudent[]
  solutions     AssignmentSolution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId], name: "profileId")
  @@map("students")
}

model OrganizationStudent {
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  studentId String  @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([organizationId, studentId])
  @@index([studentId])
}

model Classroom {
  id String @id @unique @default(cuid())

  name        String     @db.VarChar(255)
  description String     @db.Text
  schedule    Schedule[]
  resources   Resource[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  teachers                ClassroomTeacher[]
  students                ClassroomStudent[]
  channels                ClassroomChannel[]
  settings                ClassroomSettings[]
  assignments             ClassroomAssignment[]
  classroomStatistics     ClassroomStatistics?
  communicationStatistics CommunicationStatistics?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId], name: "organizationId")
  @@map("classrooms")
}

model ClassroomSettings {
  id String @id @unique @default(cuid())

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  key   ClassroomSetting
  value String
  type  SettingType

  @@index([classroomId], name: "classroomId")
  @@map("classroom_settings")
}

model ClassroomTeacher {
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@id([classroomId, teacherId])
  @@index([teacherId])
}

model ClassroomStudent {
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@id([classroomId, studentId])
  @@index([studentId])
}

model ClassroomChannel {
  id String @id @unique @default(cuid())

  name String @db.VarChar(255)

  messages  Message[]
  resources Resource[]

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classroomId], name: "classroomId")
  @@map("classroom_channels")
}

model Schedule {
  id String @id @unique @default(cuid())

  dayOfWeek     String
  startTime     String
  startTimeAmPm String
  endTime       String
  endTimeAmPm   String

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  @@index([classroomId], name: "classroomId")
  @@map("schedules")
}

model Resource {
  id String @id @unique @default(cuid())

  name String @db.VarChar(255)
  size Int
  url  String @db.VarChar(255)

  metadataId String            @unique
  metadata   ResourcesMetadata @relation(fields: [metadataId], references: [id])

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  channelId String?
  channel   ClassroomChannel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classroomId], name: "classroomId")
  @@index([channelId], name: "channelId")
  @@index([metadataId], name: "metadataId")
  @@map("resources")
}

model ResourcesMetadata {
  id String @id @unique @default(cuid())

  resource Resource?

  profileId   String
  userId      String
  userRole    Role
  classroomId String?
  channelId   String?

  @@map("resources_metadata")
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

model Message {
  id String @id @unique @default(cuid())

  content   String   @db.Text
  timestamp DateTime @default(now())
  fileUrl   String?  @db.Text

  senderId   String
  senderRole MessageSenderType

  channelId String
  channel   ClassroomChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId], name: "channelId")
  @@map("messages")
}

model Notification {
  id      String             @id @unique @default(cuid())
  type    NotificationType
  status  NotificationStatus @default(PENDING)
  message String

  recipientId   String
  recipientType NotificationUserType

  senderId   String
  senderType NotificationUserType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId, senderType], name: "sender")
  @@index([recipientId, recipientType], name: "recipient")
  @@map("notifications")
}

model ClassroomAssignment {
  id String @id @unique @default(cuid())

  title       String
  description String                @db.Text
  dueDate     String
  solutions   AssignmentSolution[]
  statistics  AssignmentStatistics?

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teacherId], name: "assignmentTeacherId")
  @@index([classroomId], name: "assignmentClassroomId")
}

model AssignmentSolution {
  id String @id @unique @default(cuid())

  note   String?                  @db.Text
  grade  Int?
  status AssignmentSolutionStatus
  files  AssignmentSolutionFile[]

  assignmentId String
  assignment   ClassroomAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assignmentId], name: "solutionAssignmentId")
  @@index([studentId], name: "solutionStudentId")
}

model AssignmentSolutionFile {
  id String @id @unique @default(cuid())

  name String @db.VarChar(255)
  size Int
  url  String @db.VarChar(255)

  solutionId String
  solution   AssignmentSolution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([solutionId], name: "solutionFileSolutionId")
}

model AssignmentStatistics {
  id String @id @unique @default(cuid())

  assignmentId String              @unique
  assignment   ClassroomAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  // SUBMISSION_TIMELINESS - calculated as (onTimeSubmissionsCount / submissionsCount)
  submissionsCount       Int @default(0)
  onTimeSubmissionsCount Int @default(0)

  // ASSIGNMENT_NOTE_USAGE - calculated as (notesCount / submissionsCount)
  notesCount Int @default(0)

  // ASSIGNMENT_RESOURCE_USAGE - calculated as (downloadedResourcesCount / (totalNumberOfStudents * totalNumberOfResources)) -> totalNumberOfResources is the number of resources attached to all assignments in the classroom
  downloadedResourcesCount Int @default(0)

  // ASSIGNMENT_COMPLETION_RATE - calculated as (lockedSubmissionsCount / totalNumberOfStudents)
  lockedSubmissionsCount Int @default(0)

  // GRADE_DISTRIBUTION - calculated as (gradeSumTotal / gradeCount)
  gradeSumTotal Int @default(0)
  gradeCount    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assignmentId], name: "assignmentStatisticAssignmentId")
  @@map("assignment_statistics")
}

model CommunicationStatistics {
  id String @id @unique @default(cuid())

  classroomId String    @unique
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  // CALL_DURATION - calculated as (totalCallDuration / totalNumberOfCalls)
  totalCallDuration  Int @default(0)
  totalNumberOfCalls Int @default(0)

  // CALL_FREQUENCY - calculated as (totalNumberOfCalls / numberOfDays) -> numberOfDays is the number of days since the classroom was created

  // PREFERED_COMM_METHOD - calculated as (totalNumberOfCalls / totalNumberOfMessages)
  totalNumberOfMessages Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classroomId], name: "communicationStatisticClassroomId")
  @@map("communication_statistics")
}

model ClassroomStatistics {
  id String @id @unique @default(cuid())

  classroomId String    @unique
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  // RESOURCE_DOWNLOAD_RATE - calculated as ((numOfClassroomResources * totalNumberOfStudents) / totalClassroomResourceDownloads) -> numOfClassroomResources is the number of classroom resources attached to a classroom
  totalClassroomResourceDownloads Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classroomId], name: "classroomStatisticClassroomId")
  @@map("classroom_statistics")
}
